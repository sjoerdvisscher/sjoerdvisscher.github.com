<?xml version='1.0' encoding='iso-8859-1'?><?xml-stylesheet type='text/xsl' href='https://w3future.com/w3f/w3f.xsl' ?>
<html xmlns="http://www.w3.org/2002/06/xhtml2" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xf="http://www.w3.org/2002/xforms/cr" xml:lang="en" xml:base="https://w3future.com/weblog/2002/01/31.xml">
<head>
<title>Thursday, January 31, 2002 - Sjoerd Visscher's weblog</title>
<link rel="meta" type="application/rdf+xml" title="FOAF" href="https://w3future.com/people/sjoerd_visscher/foaf.rdf" />
</head>
<body>
<section id="content">
	<h>Sjoerd Visscher's weblog</h>
	<p>Pondering those web technologies that may change the future of the world wide web.</p>
	<section id="note">
		<h>Last Update</h>
		<p>10/16/2005; 1:19:43 AM</p>
		<p id="alternates" class="buttons">
			<l href="https://w3future.com/weblog/2002/01/31.xml?notransform" rel="alternate" type="application/xml" title="See this web page with XHTML 2.0 technology."><span>Try</span> XHTML 2.0</l>
			<l href="view-source:https://w3future.com/weblog/2002/01/31.xml?notransform" title="View the XHTML 2.0 source of this page."><span>Src</span> XHTML 2.0</l>
			<l href="https://w3future.com/tools/xr.pl?xr=https://w3future.com/xr/w3f.xml&amp;xml=https://w3future.com/weblog/2002/01/31.xml%3Fnotransform" rel="meta" type="application/rdf+xml" title="RDF metadata"><span>RDF</span> Metadata</l>
		</p>
		<xi:include href="https://w3future.com/w3f/buttons.xml" />
	</section><section>
  <h><a rel='prev' href='https://w3future.com/weblog/2002/01/30.xml#a51' title='Wednesday, January 30, 2002'>&lt;&#160;</a><a href="https://w3future.com/weblog/2002/01/31.xml">Thursday, January 31, 2002</a><a rel='next' href='https://w3future.com/weblog/2002/02/04.txt#a54' title='Monday, February 04, 2002'>&#160;&gt;</a></h>
<a name="a53"></a>
<section id="a53">
<h ></h>
<p>Let's go into some more detail about what is the overhead in .NET web service example. The problem is that there's no good context for the code to run in. So every department of the compiler needs to know what this code is going to be used for. Let's see how many code could have been inferred when the compiler would know we're writing a webservice: "WebService", "using System.Web.Services", "WebService", "public", "[ WebMethod ]". Also the class definition is of no use, and could have been generated. (Just like Tomcat does for JSP pages) So I don't understand why .Net doesn't allow you to write:</p>
<pre>
&lt;%@ WebService Namespace="urn:Hello" Language="C#" %>
public string sayHello(string name) {
    return "Hello " + name;
}
</pre>
<p>This would still give you all the functionality and power of SOAP and .Net. I can only think of one reason: Microsoft tries to make it so complex that you have to use their tools.</p>
</section><a name="a52"></a>
<section id="a52">
<h ></h>
<blockquote><p><a href="http://www.xml.com/pub/a/2002/01/30/soap.html">Read this article</a> on Web Services interop. It's an eye-opener because they include sample code for a web service in .NET. Look at all the <a href="http://radio.weblogs.com/0001015/images/2002/01/31/dotnetexample.gif">overhead</a>. Did they really design an environment for web services? If so what are all those magic incantations about? [<a href="http://scriptingnews.userland.com/backissues/2002/01/31#l74ce7cacecc7dda60e01e3addca2f1f3">Scripting News</a>]</p></blockquote>
<p>Indeed. And I think most C-programmers think this example is actually very short, certainly for a webservice. But with scripting it can be as simple as this:</p>
<pre>
&lt;?
function sayHello($name) {
	return "Hello $name";
}
?&gt;
</pre>
<p>I save this as <code>hello.lib</code> in the right directory, <a href="https://w3future.com/pics/xmlrpc.png">et voila</a>.</p>
<p>Dave and I are both having fun seeing how others say the comparison isn't fair. Oh sure, it really isn't. The .Net example only excepts strings. This example also does a good job on numbers and dates. And we don't have to learn new things, only that functions created in a special place automatically become webservices. It saves us time so we can keep our weblogs updated.</p>
<blockquote><p> It might look very hard to write a "Hello world" routine in C#, Java or even Assembler and expose that as a Web Service. On the other hand, it might look very hard to write a Pascal-Compiler in UserTalk, PHP or Python and expose that as a Web Service. [<a href="http://radio.weblogs.com/0100430/2002/01/31.html">A Practising Maniac at Work</a>]</p></blockquote>
<p>Christian Riege has a good point. However most webservices are more like a "Hello World" routine than like a compiler. (anyone up for a Java Compiler webservice?)</p>
</section>
</section>
<xi:include href='https://w3future.com/tools/rdf.php?about=https://w3future.com/weblog/2002/01/31.xml' /></section>
<section id="navigation"><xi:include href="https://w3future.com/w3f/sections.xml" /></section>
<section id="sidebar"><xi:include href="https://w3future.com/weblog/sidebars/weblog.opml" /></section>
</body>
</html>
