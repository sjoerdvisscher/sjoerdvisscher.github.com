<?xml version='1.0' encoding='iso-8859-1'?><?xml-stylesheet type='text/xsl' href='http://w3future.com/w3f/w3f.xsl' ?>
<html xmlns="http://www.w3.org/2002/06/xhtml2" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xf="http://www.w3.org/2002/xforms/cr" xml:lang="en" xml:base="http://w3future.com/weblog/2004/02/index.txt">
<head>
<title>Sjoerd Visscher's weblog</title>
</head>
<body>
<section id="content">
	<h>Sjoerd Visscher's weblog</h>
	<p></p>
	<section id="note">
		<h>Last Update</h>
		<p>10/16/2005; 1:29:42 AM</p>
		<p id="alternates" class="buttons">
			<l href="http://w3future.com/weblog/2004/02/index.xml?notransform" rel="alternate" type="application/xml" title="See this web page with XHTML 2.0 technology."><span>Try</span> XHTML 2.0</l>
			<l href="view-source:http://w3future.com/weblog/2004/02/index.xml?notransform" title="View the XHTML 2.0 source of this page."><span>Src</span> XHTML 2.0</l>
			<l href="http://w3future.com/tools/xr.pl?xr=http://w3future.com/xr/w3f.xml&amp;xml=http://w3future.com/weblog/2004/02/index.xml%3Fnotransform" rel="meta" type="application/rdf+xml" title="RDF metadata"><span>RDF</span> Metadata</l>
		</p>
		<xi:include href="http://w3future.com/w3f/buttons.xml" />
	</section><section>
  <h><a href="http://w3future.com/weblog/2004/02/13.xml">Friday, February 13, 2004</a></h>
<a name="a271"></a>
<section id="a271">
<h id='liberalXmlParsingRelatedToPersonality'><a href="http://w3future.com/weblog/2004/02/13.xml#a271" class="weblogItemTitle">Liberal XML parsing related to personality?</a></h>
<p>The heat of the discussion on liberal XML parsing has subsided, so this is actually a little late. That's because I wasn't sure if I should post this. But <a href="http://archive.scripting.com/2004/02/12#When:10:44:01AM">a post by Dave Winer today</a> convinced me to post it anyway. Let me just say up front that I could be completely wrong.</p>
<p>First let me quote <a href="http://www.w3.org/TR/2004/REC-xml-20040204/#dt-fatal">the definition of a fatal error in the XML recommendation</a>:</p>
<blockquote cite="http://www.w3.org/TR/2004/REC-xml-20040204/#dt-fatal"><p>An error which a conforming XML processor MUST detect and report to the application. After encountering a fatal error, the processor MAY continue processing the data to search for further errors and MAY report such errors to the application. In order to support correction of errors, the processor MAY make unprocessed data from the document (with intermingled character data and markup) available to the application. Once a fatal error is detected, however, the processor MUST NOT continue normal processing (i.e., it MUST NOT continue to pass character data and information about the document's logical structure to the application in the normal way).</p></blockquote>
<p>RSS and Atom are both XML file formats, they do not accidentally look like XML. Thus according to the XML specification, aggregators are not allowed to try to show broken feeds. If you are doing liberal XML parsing, <em>you are not playing by the rules</em>.</p>
<p>A lot of people are parsing feeds, or are planning to do so. Most of them do so because they want to do something interesting with the data, it might be an aggregator, but it could also be some cool new application. What they certainly are not interested in is the technology of parsing itself. They simply want to use one of the abundantly available XML parsers. Now there are two ways to do feed parsing. One is to only allow proper XML and patiently educate feed producers who do not use the proper XML tools how to improve. (And almost all feed producers are willing to produce valid XML, but they are not helped enough to actually do that.) The other way is to liberally parse anything that vaguely resembles XML and spoil the fun of using feeds for everybody else. If you are doing liberal XML parsing, <em>you are being inconsiderate</em>.</p>
<p>Now there are only <a href="http://diveintomark.org/">two</a> <a href="http://www.cincomsmalltalk.com/blog/blogView">blogs</a> that I have stopped to be subscribed to because the level of ranting was simply too annoying. The owners of those blogs also happen to be two very vocal advocates of liberal XML parsing.</p>
<p>But this could just be a coincidence.</p>
</section>
</section><section>
  <h><a href="http://w3future.com/weblog/2004/02/10.xml">Tuesday, February 10, 2004</a></h>
<a name="a270"></a>
<section id="a270">
<h id='providingContextInProgrammingpart2'><a href="http://w3future.com/weblog/2004/02/10.xml#a270" class="weblogItemTitle">Providing context in programming (part 2)</a></h>
<p>(Read <a href="http://w3future.com/weblog/2003/12/15.xml#providingContextInProgrammingpart1">part 1</a> first.)</p>
<p>When reading code, a lot of people like to <a href="http://lambda.weblogs.com/discuss/msgReader$10353">print out the code</a> and read it on paper. One of the reasons for that is that it is easier to switch from function call to the function specification and back. However functions are supposed to provide abstraction. You should be able to understand the function call without the function specification. Why is this often not possible? Because the function call doesn't provide enough context for the arguments.</p>
<p>Take for example this function from the DOM: <code>parent.insertBefore(nodeA, nodeB)</code>. Is nodeA inserted before nodeB, or is nodeB inserted before nodeA? I keep forgetting that. And the more arguments, the more ridiculous it gets: <code>mouseEvent.initMouseEvent("DOMMouseScroll", true, true, view, numLines, refPoint.x, refPoint.y, point.x, point.y, isControl, isAlt, isShift, isMeta, 0, null)</code> (Simplified from <a href="http://lxr.mozilla.org/seamonkey/source/content/events/src/nsEventStateManager.cpp#1565">the Mozilla source code</a>). It's impossible to tell what each argument does.</p>
<p>I think almost any programmer can relate to this problem. But functions with multiple arguments seem to be so fundamental in programming that solutions to this problem never actually involve abandoning their use. These solutions are f.e. IntelliSense and using properly named constants. They reintroduce the missing context.</p>
<p>But proper language design can fix this problem more elegantly. Smalltalk provides an interesting solution: each extra argument is separated by a word. F.e. <code>parent insert: nodeA before: nodeB</code> is as clear as it can be. The only languages I know that actually restrict the number of arguments are APL and its derivatives. In APL functions are monadic (one argument, prefix notation) or dyadic (two arguments, infix notation).</p>
<p>That functions with 2 arguments are written with infix notation is very important. Using the DOM example again, but now assuming we don't need the parent: <code>insertBefore nodeA, nodeB</code> is not clear, but <code>nodeA insertBefore nodeB</code> is clear. With infix notation you have more options to choose a clear function name. Note that a method call with one argument on an object can be seen as infix: <code>nodeA.insertBefore(nodeB)</code>.</p>
<p>Is a maximum of 2 arguments realistic for everyday programming? I'd say yes, and thinking about this problem actually improved my code! It forces you to really think about the structure of your data. F.e. when you'd normally be lazy and pass a point on the screen as two arguments <code>x</code> and <code>y</code>, you're now forced to create a Point object. It's hard to prove this is a good thing, but I've found it improves my code a lot. And again, programming language design comes into play, because creating simple intermediate objects is too much work, and often performs bad.</p>
<p>More later&#8230;</p>
</section>
</section><section>
  <h><a href="http://w3future.com/weblog/2004/02/05.xml">Thursday, February 05, 2004</a></h>
<a name="a269"></a>
<section id="a269">
<h id='whenASearchEngineIsntEnoughCallALibrarian'><a href="http://w3future.com/weblog/2004/02/05.xml#a269" class="weblogItemTitle">When a Search Engine Isn't Enough, Call a Librarian?</a></h>
<blockquote cite="http://www.nytimes.com/2004/02/05/technology/circuits/05libr.html?ex=1391403600&amp;en=26c6c8a9c0c4212f&amp;ei=5007&amp;partner=USERLAND"><p>"What's the name of the party that Ross Perot established?" a user wanted to know.</p><p>Ms. Tuckerman checked the Internet for a biography of Mr. Perot. Then she quickly switched to an electronic database of biographies to which the library subscribes. But even after scrolling through several screens of text, she was unable to come up with a satisfactory answer.</p><p>So she turned to a rotating bookshelf next to her desk and selected a volume of the World Book Encyclopedia. "Sometimes the old-fashioned sources work the best," she said. Within a few minutes she found the answer in the encyclopedia: the Reform Party. [<a href="http://www.nytimes.com/2004/02/05/technology/circuits/05libr.html?ex=1391403600&amp;en=26c6c8a9c0c4212f&amp;ei=5007&amp;partner=USERLAND">NYTimes</a> via <a href="http://archive.scripting.com/2004/02/05#When:6:01:27AM">Scripting News</a>]</p></blockquote>
<p>Type in Google: <a href="http://www.google.com/search?q=ross+perot+party">ross perot party</a>. Answer within a few seconds. Old-fashioned sources only work the best when you use old-fashioned search queries.</p>
</section>
</section>
<xi:include href="http://w3future.com/tools/rdf.php?about=http://w3future.com/weblog/2004/02/index.txt" /></section>
<section id="navigation"><xi:include href="http://w3future.com/w3f/sections.xml" /></section>
<section id="sidebar"><xi:include href="http://w3future.com/weblog/sidebars/weblog.opml" /></section>
</body>
</html>